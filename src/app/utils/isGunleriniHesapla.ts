import { isWeekend, addDays } from "date-fns";

// TÃ¼rkiye iÃ§in resmi tatil listesi (Gerekirse gÃ¼ncellenebilir)
const resmiTatilListesi = [
  "2025-01-01", // YÄ±lbaÅŸÄ±
  "2025-04-23", // 23 Nisan Ulusal Egemenlik ve Ã‡ocuk BayramÄ±
  "2025-05-01", // Ä°ÅŸÃ§i BayramÄ±
  "2025-05-19", // AtatÃ¼rk'Ã¼ Anma, GenÃ§lik ve Spor BayramÄ±
  "2025-07-15", // Demokrasi ve Milli Birlik GÃ¼nÃ¼
  "2025-08-30", // Zafer BayramÄ±
  "2025-10-29", // Cumhuriyet BayramÄ±
];

/**
 * Belirtilen baÅŸlangÄ±Ã§ ve bitiÅŸ tarihleri arasÄ±nda kaÃ§ iÅŸ gÃ¼nÃ¼ olduÄŸunu hesaplar.
 * @param baslangicTarihi BaÅŸlangÄ±Ã§ tarihi (YYYY-MM-DD)
 * @param bitisTarihi BitiÅŸ tarihi (YYYY-MM-DD)
 * @param cumartesiDahil Cumartesi gÃ¼nleri iÅŸ gÃ¼nÃ¼ olarak sayÄ±lacak mÄ±?
 * @returns Ä°ÅŸ gÃ¼nÃ¼ sayÄ±sÄ±
 */
export function isGunleriniHesapla(
  baslangicTarihi: string,
  bitisTarihi: string,
  cumartesiDahil: boolean
): number {
  let startDate = new Date(baslangicTarihi);
  const endDate = new Date(bitisTarihi); // ğŸ”¥ sadece burada let â†’ const oldu
  let isGunleri = 0;

  while (startDate <= endDate) {
    const tarihStr = startDate.toISOString().split("T")[0]; // YYYY-MM-DD formatÄ±na Ã§evir
    const haftaSonuMu = isWeekend(startDate);
    const tatilMi = resmiTatilListesi.includes(tarihStr);

    // EÄŸer cumartesi iÅŸ gÃ¼nÃ¼ olarak sayÄ±lacaksa, sadece Pazar'Ä± (0) Ã§Ä±kar.
    if ((!haftaSonuMu || (cumartesiDahil && startDate.getDay() !== 0)) && !tatilMi) {
      isGunleri++;
    }

    startDate = addDays(startDate, 1); // Bir gÃ¼n ileri git
  }

  return isGunleri;
}
